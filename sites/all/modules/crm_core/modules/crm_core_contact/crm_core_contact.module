<?php

/**
 * @file
 * Provides contact entity and integration.
 */


/**
 * Implements hook_entity_info().
 */
function crm_core_contact_entity_info() {
  $return = array(
    'crm_core_contact' => array(
      'permission labels' => array(
      'singular' => t('contact'),
      'plural' => t('contacts'),
       ),
      'label' => t('Contact'),
      'label callback' => 'crm_core_contact_label',
      'controller class' => 'CRMCoreContactController',
      'base table' => 'crm_core_contact',
      'revision table' => 'crm_core_contact_revision',
      'uri callback' => 'crm_core_contact_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'contact_id',
        'revision' => 'vid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Contact'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  foreach (crm_core_contact_type_get_name() as $type => $name) {
    $return['crm_core_contact']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/crm/contact-types/%crm_core_contact_type',
        'real path' => 'admin/structure/crm/contact-types/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer contact types'),
      ),
    );
  }

  return $return;
}


/**
 * Implements hook_permission().
 */
function crm_core_contact_permission() {
  $permissions = array(
    'administer contact types' => array(
      'title' => t('Administer Contact Types'),
      'description' => t('Allows the user to edit the types of contact such as Individual, Organization, etc.'),
    ),
//    'view contachook_permits' => array(
//      'title' => t('View Contacts'),
//      'description' => t('Allows the user to view list of CRM contacts.'),
//    ),hook_permi
    'view disabled contact types' => array(
      'title' => t('View Disabled Contact Types'),
      'description' => t('Allows the user to view disabled contact types'),
    ),
    'revert contact record' => array(
      'title' => ('Revert Contact Record'),
      'description' => t('Allows the user to have ability to revert contacts'),
    ),
//    'add contacts' => array(
//      'title' => t('Add Contacts'),
//      'description' => t('Allows the user to add contact to the CRM.'),
//    ),
//    'edit contacts' => array(
//      'title' => t('Edit Contacts'),
//      'description' => t('Allows the user to edit contacts that have already been added to the CRM.'),
//    ),
  );
  
  $permissions += crm_core_entity_access_permissions('crm_core_contact');
  
  return $permissions;
  
}

/**
 * Check permission for various contact operations
 *
 * @param stdClass $crm_core_contact_type
 * A crm_core_contact_type object
 *
 * @return
 * bool TRUE if access is granted/FALSE is access is denied
 */
function crm_core_contact_access($crm_core_contact, $op = 'create') {

  $administer_contact = user_access('administer crm_core_contact entities');

  switch ($op) {
    case 'view':
      $view_any_contact = user_access('view any crm_core_contact entity');
      $view_type_contact = user_access('view any crm_core_contact entity of bundle ' . $crm_core_contact->type);
      return ($administer_contact || $view_any_contact || $view_type_contact);
    break;
    case 'edit':
    case 'delete':
      $edit_any_contact = user_access('edit any crm_core_contact entity');
      $edit_type_contact = user_access('edit any crm_core_contact entity of bundle ' . $crm_core_contact->type);
      return ($administer_contact || $edit_any_contact || $edit_type_contact);
    break;
    case 'revert':
      // @todo: more fine grained will be adjusting dynamic permission generation for reverting bundles of contact
      $revert_any_contact = user_access('revert contact record');
      return ($administer_contact || $revert_any_contact);
    break;
    case 'create_view':
      // we just need any of the create permissions
      $create_any_contact = user_access('create crm_core_contact entities');
      $crm_core_contact_types = array_keys(crm_core_contact_types(TRUE));
      foreach($crm_core_contact_types as $crm_core_contact_type) {
        $create_type_contact[] = user_access('create crm_core_contact entities of bundle ' . $crm_core_contact_type);
      }
      // they just need any type of contact type create permission
      $create_type_contact_flag = in_array(TRUE, $create_type_contact);
      return ($administer_contact || $create_any_contact || $create_type_contact_flag);
    break;
    case 'create':
    default:
      // must be able to create contact of any type (OR) specific type
      // (AND) have an active contact type
      // IMPORTANT, here $crm_core_contact is padded in as a string of the contact type
      $type = $crm_core_contact;
      $create_any_contact = user_access('create crm_core_contact entities');
      $create_type_contact = user_access('create crm_core_contact entities of bundle ' . $type);
      // load the contact type
      $crm_core_contact_type = crm_core_contact_type_load($type);
      $contact_type_is_active = (!(bool) $crm_core_contact_type->disabled);
      return (($administer_contact || $create_any_contact || $create_type_contact) && $contact_type_is_active);
    break;
  }
}

/**
 * Implements hook_views_api().
 */
function crm_core_contact_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_contact') . '/includes/views',
  );
}


/**
 * Entity uri callback.
 */
function crm_core_contact_uri($contact) {
  return array(
    'path' => 'crm/contact/' . $contact->contact_id,
  );
}


/**
 * Entity label callback.
 */
function crm_core_contact_label($entity) {
  $build_info = crm_core_contact_view($entity);
  return render($build_info['contact_name'][0]);
}

/**
 * Check to see if a contact type is locked, can be disabled/deleted
 *
 * @param
 * stdClass $crm_core_contact_type
 * A fully loaded $crm_core_contact_type object
 *
 * string $op
 * The operation being performed on the contact type to check for
 * can be edit, delete
 *
 * @return
 * bool TRUE if permission given/FALSE if permission denied
 */
function crm_core_contact_type_permission($crm_core_contact_type, $op = 'edit') {

  // first check drupal permission
  if (!user_access('administer contact types')) {
    return FALSE;
  }

  switch($op) {
    case 'enable':
      // only disabled contact type can be enabled
      if ((bool) $crm_core_contact_type->disabled) {
        return TRUE;
      }
      else {
        return FALSE;
      }
    break;
    case 'disable':
      // locked contact type cannot be disabled
      if ((bool) $crm_core_contact_type->locked) {
        return FALSE;
      }
      if ((bool) $crm_core_contact_type->disabled) {
        return FALSE;
      }
    break;
    case 'delete':
      // if contact type is locked, you can't delete it
      if ((bool) $crm_core_contact_type->locked) {
        return FALSE;
      }
      // if contact instance of this contact type exist, you can't delete it
      $count = db_query("SELECT count(*) FROM {crm_core_contact} WHERE `type` = :type",
      array(':type' => $crm_core_contact_type->type))->fetchField();
      if ($count > 0) {
        return FALSE;
      }
    break;
    case 'edit':
    default:
      // if the contact type is locked, you can't edit it.
      if ((bool) $crm_core_contact_type->locked) {
        return FALSE;
      }

      if ((bool) $crm_core_contact_type->disabled) {
        return FALSE;
      }

    break;
  }

  return TRUE;

}

/**
 * Returns an array of contact type objects keyed by type.
 *
 * @param
 * bool $active
 * TRUE if we only want to select active contact types
 * FALSE if we want to select all contact types
 *
 * @return
 * array $contact_types
 * An numeric index array of contact types (machine names)
 */
function crm_core_contact_types($active = FALSE) {
  // First check the static cache for a contact types array.
  $contact_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($contact_types)) {
    if ($active) {
      $contact_types = db_query('SELECT * FROM {crm_core_contact_type} WHERE disabled = 0')->fetchAllAssoc('type');
    } else {
      $contact_types = db_query('SELECT * FROM {crm_core_contact_type}')->fetchAllAssoc('type');
    }
  }

  return $contact_types;
}


/**
 * Returns the human readable name of any or all contact types.
 *
 * @param $type
 *  [optional] - Specify the type whose name to return.
 * @return
 *  If $type is specified, a string containing the human
 *  readable name of the type.
 *  If $type isn't specified an array containing all human
 *  readable names keyed on the machine type.
 */
function crm_core_contact_type_get_name($type = NULL) {
  $contact_types = crm_core_contact_types();

  // If type is set return the name if it exists
  if (!empty($type)) {
    if (isset($contact_types[$type])) {
      return $contact_types[$type]->name;
    }
    else {
      return FALSE;
    }
  }

  // Otherwise return a mapping of type => name
  foreach ($contact_types as $key => $value) {
    $contact_types[$key] = $value->name;
  }

  return $contact_types;
}


/**
 * Return a new contact type with initialize fields.
 *
 * @param string $type
 *   The machine-readable name of the contact type. (eg. individual)
 *
 * @return
 *   A stdClass object with contact type fields
 */
function crm_core_contact_type_new($type = '') {
  return (object) array(
    'type' => $type,
    'name' => '',
    'description' => '',
    'help' => '',
  );
}


/**
 * Loads a contact type.
 *
 * @param string $type
 *   The machine-readable name of the contact type.
 */
function crm_core_contact_type_load($type) {
  return db_query("SELECT * FROM {crm_core_contact_type} WHERE type = :type", array(':type' => $type))->fetchObject();
}


/**
 * Saves a contact type.
 *
 * @param $contact_type object
 *
 * @return
 *   FALSE if the insert fails and SAVED_NEW or SAVED_UPDATED
 *   based on the operation performed
 */
function crm_core_contact_type_save($contact_type) {
  $op = drupal_write_record('crm_core_contact_type', $contact_type, empty($contact_type->is_new) ? 'type' : array());
  menu_rebuild();

  // If this is a new contact type and the insert did not fail...
  if (!empty($contact_type->is_new) && $op !== FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('crm_core_contact', $contact_type->type);

    // Add base fields to the contact
    crm_core_contact_type_initialize($contact_type->type);

    // Notify other modules that a new contact type has been created.
    module_invoke_all('crm_core_contact_type_insert', $contact_type);
  }
  else {
    // Notify other modules that an existing contact type has been updated.
    module_invoke_all('crm_core_contact_type_update', $contact_type);
  }

  return $op;
}

/**
 * Delete a contact type
 *
 * @param stdClass $crm_core_contact_type
 * A loaded $crm_core_contact_type object
 *
 */
function crm_core_contact_type_delete($crm_core_contact_type) {

  // delete all the field instance of the bundle
  field_attach_delete_bundle('crm_core_contact', $crm_core_contact_type->type);

  db_delete('crm_core_contact_type')
  ->condition('type', check_plain($crm_core_contact_type->type))
  ->execute();
}


/**
 * Sets the default contact type
 * @param arary $info
 *   an associative array of contact type information
 *   possible keys:
 *     - type
 *     - name
 *     - description
 *     - custom
 *     - modified
 *     - is_new
 *
 * @return
 * A default contact type
 */
function crm_core_contact_type_set_defaults($info = array()) {
  $type = &drupal_static(__FUNCTION__);

  if (!isset($type)) {
    $type = new stdClass();
    $type->type = '';
    $type->name = '';
    $type->description = '';
    $type->custom = 0;
    $type->disabled = 0;
    $type->locked = 0;
    $type->modified = 0;
    $type->is_new = 1;
  }

  $new_type = clone $type;
  $info = (array) $info;
  foreach ($info as $key => $data) {
    $new_type->$key = $data;
  }
  $new_type->orig_type = isset($info['type']) ? $info['type'] : '';

  return $new_type;
}

/**
 * Initialize new contact type with basic fields.
 *
 * @param string $type
 *   The contact type (machine readable name) going to be
 *   stored in the field instance
 */
function crm_core_contact_type_initialize($type) {
  $fields = array();

  // Name field
  $fields[] = array(
    'field_name' => 'contact_name',
    'type' => 'name',
    'entity_types' => array('crm_core_contact'),
    'translatable' => FALSE,
    'locked' => TRUE,
    'settings' => array(
      // work around, all contact_name field requires at least
      // given, household, organizations just need one name field/component
      'minimum_components' => array('given' => 'given'),
    ),
  );



  // Image field
  $fields[] = array(
    'field_name' => 'contact_image',
    'type' => 'image',
    'entity_types' => array('crm_core_contact'),
    'translatable' => FALSE,
    'locked' => FALSE,
  );

  // Create the fields if they don't exist
  foreach ($fields as $field) {
    $info = field_info_field($field['field_name']);
    if (empty($info)) {
      field_create_field($field);
    }
  }

  // Create field instances for the type if they don't exist
  $instances = array();

  $instances[] = array(
    'field_name' => 'contact_name',
    'entity_type' => 'crm_core_contact',
    'bundle' => $type,
    'label' => t('Name'),
    'required' => TRUE,
    'widget' => array(
      'type' => 'name_widget',
    ),
    'display' => array(),
  );

  // For household or organizations, the label should be reflected
  if ($type == 'organization' || $type == 'household') {
    $instances[0]['label'] = t('@type name', array('@type' => ucwords($type)));

    // work around, using inline css to hide the rest of the name components
    // this is due to http://drupal.org/node/1324054
    $instances[0]['settings']['inline_css'] = array(
      'title' => 'display:none',
      'middle' => 'display:none',
      'family' => 'display:none',
      'generational' => 'display:none',
      'credentials' => 'display:none',
    );
  }

  $instances[] = array(
    'field_name' => 'contact_image',
    'entity_type' => 'crm_core_contact',
    'bundle' => $type,
    'label' => t('Image'),
    'required' => FALSE,
    'settings' => array(),
    'widget' => array(
      'type' => 'image_image',
    ),
    'display' => array(
      'default' => array (
        'label' => 'hidden',
        'type' => 'image',
        'weight' => '1',
        'settings' =>
        array (
          'image_style' => 'medium',
          'image_link' => '',
        ),
        'module' => 'image',
      ),
    ),
  );

  // Create field instances if they don't exist
  foreach ($instances as $instance) {
    $info_instance = field_info_instance('crm_core_contact', $instance['field_name'], $type);
    if (empty($info_instance)) {
      field_create_instance($instance);
    }
  }
}


/**
* Checks to see if a given contact type already exists.
*
* @param $type
* The string to match against existing types.
*
* @return
* TRUE or FALSE indicating whether or not the contact type exists.
*/
function crm_core_contact_type_validate_unique($type) {
  // Look for a match of the type.
  $match_id = db_query('SELECT type FROM {crm_core_contact_type} WHERE type = :type', array(':type' => $type))->fetchField();
  return !$match_id;
}


/**
 * Save a contact
 *
 * @param stdClass $contact
 *   The contact object to be saved
 *
 * @return
 *   a contact object upon successful save
 *   or an exception thrown
 */
function crm_core_contact_save($contact) {
  return entity_get_controller('crm_core_contact')->save($contact);
}


/**
 * Load a contact
 *
 * @param int $contact_id
 *   Contact id of the contact to be loaded
 * @param array $conditions
 *   @see crm_core_contact_load_multiple()
 * @return
 *   A contact object upon successful load
 *   FALSE if loading fails
 */
function crm_core_contact_load($contact_id, $conditions = array()) {
  $contacts = crm_core_contact_load_multiple(array($contact_id), $conditions);
  return $contacts ? reset($contacts) : FALSE;
}


/**
 * Load one or more contact
 *
 * @param array $contact_ids
 *   An array of contact id to be loaded
 * @param array $conditions (deprecated)
 *   An associative array of conditions on the base table
 *   with keys equal to the field name and value equal to
 *   the value the fields must have
 *
 * @return
 *   An array of entity object indexed by their ids
 */
function crm_core_contact_load_multiple($contact_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_core_contact', $contact_ids, $conditions, $reset);
}


/**
 * Delete single contact records
 *   The wrapper for delete() method of 'crm_core_contact' controller.
 *
 * @param $contact_id
 * contact id
 *
 * @return
 * TRUE or throw exception and write it to watchdog.
 */
function crm_core_contact_delete($contact_id) {
  return crm_core_contact_delete_multiple(array($contact_id));
}


/**
 * Delete multiply contact records
 *   The wrapper for delete() method of 'crm_core_contact' controller.
 *
 * @param $contact_ids
 * flat array of contact ids like array(5, 6, 7);
 *
 * @return
 * TRUE or throw exception and write it to watchdog.
 */
function crm_core_contact_delete_multiple($contact_ids = array()) {
  return entity_get_controller('crm_core_contact')->delete($contact_ids);
}


/**
 * View a single contact record.
 */
function crm_core_contact_view($contact) {
  field_attach_prepare_view('crm_core_contact', array($contact->contact_id => $contact), 'full');
  return field_attach_view('crm_core_contact', $contact, 'full');
}


/**
 * Title callback for a contact.
 *
 * @param $contact object
 *
 * @return title string
 */
function crm_core_contact_title($contact) {
  $element = field_view_value('crm_core_contact', $contact, 'contact_name', $contact->contact_name['und'][0]);
  return drupal_render($element);
}


/**
 * Fetch revision list for a contact
 *
 * @param stdClass $contact
 *
 * @return
 *   An associative array of revision information for
 *   a given contact (keys below)
 *     - vid
 *     - log
 *     - created
 *     - changed
 *     - uid
 */
function crm_core_contact_revision_list($contact) {
  return db_select('crm_core_contact_revision', 'rev')->
           fields('rev', array('vid', 'log', 'created', 'changed', 'uid'))->
           condition('contact_id', $contact->contact_id)->
           execute()->
           fetchAllAssoc('vid', $fetch);
}


/**
 * Return a contact object structure
 *
 * @param stdClass $contact
 *
 * @return
 * A structured contact string
 */
function crm_core_contact_devel_load_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');
  return devel_load_object('crm_core_contact', $contact);
}


/**
 * Print the contact structure being loaded
 *
 * @param stdClass $contact
 *
 * @return
 * prints a structured contact object
 */
function crm_core_contact_devel_render_object($contact) {
  module_load_include('inc', 'devel', 'devel.pages');
  return devel_render_object('crm_core_contact', $contact);
}


/**
 * Revert a contact to a previous revision
 *
 * @param stdClass $contact
 * @param int $vid
 *
 * @return
 * TRUE upon success, FALSE upon failure
 */
function crm_core_contact_revert($contact, $vid) {
  return entity_get_controller('crm_core_contact')->revertContact($contact, $vid);
}
