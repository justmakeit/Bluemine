<?php

/**
 * Include file with hook_property_info().
 */
module_load_include('inc', 'crm_core_activity', 'crm_core_activity.info');

/**
 * Implements hook_entity_info().
 */
function crm_core_activity_entity_info() {
  $return = array(
    'crm_core_activity' => array(
      'label' => t('Activity'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'crm_core_activity',
//      'revision table' => 'crm_activity_revision',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'activity_id',
        'bundle' => 'type',
//        'revision' => 'revision_id',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'crm_core_activity_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'crm_core_activity_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'crm_core_activity',
      'permission labels' => array(
        'singular' => t('activity'),
        'plural' => t('activities'),
      ),
    ),
  );
  $return['crm_core_activity_type'] = array(
    'label' => t('Activity Type'),
    'entity class' => 'CRMActivityType',
    'controller class' => 'EntityAPIControllerExportable',
    'base table' => 'crm_core_activity_type',
    'fieldable' => FALSE,
    'bundle of' => 'crm_core_activity',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'crm_core_activity',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/crm/activity-types',
      'file' => 'crm_core_activity.admin.inc',
      'controller class' => 'CRMActivityTypeUIController',
    ),
    'access callback' => 'crm_core_activity_type_access',
    'access arguments' => array('administer activity types'),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Use this hook to specify profile bundles to avoid a recursion, as loading
 * the profile types needs the entity info too.
 */
function crm_core_activity_entity_info_alter(&$entity_info) {
  foreach (crm_core_activity_types() as $type => $info) {
    $entity_info['crm_core_activity']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/crm/activity-types/manage/%crm_core_activity_type',
        'real path' => 'admin/structure/crm/activity-types/manage/' . $type,
        'bundle argument' => 5,
        // TODO write proper hook_permissions and set proper access callback here.
        'access callback' => TRUE,
        'access arguments' => array('administer crm_core_activity types'),
      ),
    );
  }
}

/**
 * Implements hook_crm_core_contact_delete.
 */
function crm_core_activity_crm_core_contact_delete($crm_core_contact) {

  // query the activities that belongs to the contact
  // @todo for activities involving other contacts, it might be wise to just
  // delete the contact from the participant list?
  $query = new EntityFieldQuery;
  $results = $query
    ->entityCondition('entity_type', 'crm_core_activity')
    ->fieldCondition('field_activity_participants', 'target_id', $crm_core_contact->contact_id, '=')
    ->fieldCondition('field_activity_participants', 'target_type', 'crm_core_contact', '=')
    ->execute();

  if(empty($results)) {
    return;
  }
  foreach($results['crm_core_activity'] as $crm_core_activity) {
    crm_core_activity_delete($crm_core_activity);
  }
}

/**
 * Implements hook_permission().
 */
function crm_core_activity_permission() {
  $permissions = array(
    'administer crm_core_activity types' => array(
      'title' => t('Administer activity types'),
      'description' => t('Allows users to configure activity types and their fields.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += crm_core_entity_access_permissions('crm_core_activity');

  return $permissions;
}

/**
 * Use a separate class for profile types so we can specify some defaults
 * modules may alter.
 */
class CRMActivityType extends Entity {
  public $type;
  public $label;
  public $weight = 0;

  public function __construct($values = array()) {
    parent::__construct($values, 'crm_core_activity_type');
  }

  function isLocked() {
    return isset($this->status) && empty($this->is_new) && (($this->status & ENTITY_IN_CODE) || ($this->status & ENTITY_FIXED));
  }
}

/**
 * UI controller for CRM Activity Type.
 */
class CRMActivityTypeUIController extends EntityDefaultUIController {
  /**
   * Overrides hook_menu() defaults.
   */
  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Manage activity types.';
    return $items;
  }
}

/**
 * Load a CRM Activity object.
 */
function crm_core_activity_load($activity_id, $reset = FALSE) {
  $activities = crm_core_activity_load_multiple(array($activity_id), array(), $reset);
  return reset($activities);
}

/**
 * Load multiple activities based on certain conditions.
 */
function crm_core_activity_load_multiple($activity_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('crm_core_activity', $activity_ids, $conditions, $reset);
}

/**
 * Create new activity object.
 *   Wrapper for controller.
 *
 * @param array $values
 *   Keyed array of new object attribures.
 *
 * @return object crm_core_activity entity
 *
 * @see entity_create()
 */
function crm_core_activity_create($values) {
  return new Entity($values, 'crm_core_activity');
}

/**
 * Save single activity object to db.
 *   Wrapper for controller.
 *
 * @param object $activity
 *   Entity object of crm_core_activity type.
 */
function crm_core_activity_save($activity) {
  return entity_get_controller('crm_core_activity')->save($activity);
}

/**
 * Delete single activity.
 *
 * @param object $activity
 *   Entity object of crm_core_activity type.
 */
function crm_core_activity_delete($activity) {
  crm_core_activity_delete_multiple(array($activity->activity_id));
  // create a hook for deleting an activity
  module_invoke_all('crm_core_activity_delete', $activity);
  field_attach_delete('crm_core_activity', $activity);
}

/**
 * Delete multiple activities.
 *   Wrapper for controller.
 *
 * @param array $activity_ids
 *   array of entity ids that should be deleted.
 */
function crm_core_activity_delete_multiple($activity_ids) {
  entity_get_controller('crm_core_activity')->delete($activity_ids);
}

/**
 * CRM Activity Type helpers.
 */

/**
 * Load Activity Type.
 */
function crm_core_activity_type_load($activity_type) {
  return crm_core_activity_types($activity_type);
}

/**
 * List of Activity Types.
 */
function crm_core_activity_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('crm_core_activity_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Get activity type name by machine name of activity type.
 *
 * @param type $type_name
 * @return type
 */
function crm_core_activity_type_name($type_name = NULL) {
  $types = crm_core_activity_types();

  $names = array();
  foreach ($types as $type) {
    $names[$type->type] = $type->label;
  }

  if (!empty($type_name)) {
    if (isset($names[$type_name])) {
      return $names[$type_name];
    }
    else {
      return FALSE;
    }
  }
  return $names;
}

/**
 * Implements hook_forms().
 *
 * Create form for adding/editing crm_activity.
 * Their id is like 'crm_activity_edit_' . $bundle . '_form'.
 *
 * @see entity_ui_get_form().
 */
function crm_core_activity_forms($form_id, $args) {
  $forms = array();

  // Check whether it is crm_activity form.
  if (strpos($form_id, 'crm_core_activity_edit_') === 0) {
    $forms[$form_id] = array(
      'callback' => 'crm_core_activity_form',
    );
  }

  return $forms;
}

/**
 * Label callback for activity.
 *
 * Used to set title of the view activity page.
 */
function crm_core_activity_label($activity) {
  return $activity->title;
}

/**
 * Implements hook_views_api().
 */
function crm_core_activity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'crm_core_activity') . '/views',
  );
}

/**
 * Activity type access callback.
 */
function crm_core_activity_type_access($string) {
  return user_access($string);
}

/**
 * Access callback to create new activity.
 *
 * @param type $contact
 * @param type $activity_type
 */
function crm_core_activity_create_access($contact, $activity_type) {
  return (user_access('administer crm_core_activity entities')
       || user_access('create crm_core_activity entities')
       || user_access('create crm_core_activity entities of bundle ' . $activity_type));
}

function crm_core_activity_view_access($activity) {
  global $user;
  return (user_access('administer crm_core_activity entities')
   || user_access('view any crm_core_activity entity')
   || user_access('view any crm_core_activity entity of bundle ' . $activity_type));
}

function crm_core_activity_edit_access($activity) {
  global $user;
  return (user_access('administer crm_core_activity entities')
   || user_access('edit any crm_core_activity entity')
   || user_access('edit any crm_core_activity entity of bundle ' . $activity_type));
}

/**
 * Creates or Saves an activity type
 *
 * @param stdClass $activity_type
 *   The activity type info to be saved
 *
 */
function crm_core_activity_type_save($activity_type) {

  $op = drupal_write_record('crm_core_activity_type', $activity_type, (!$activity_type->is_new) ? 'id' : array());

  menu_rebuild();

 // If this is a new activity type and the insert did not fail...
  if ($activity_type->is_new && $op != FALSE) {
    // Notify the field API that a new bundle has been created.
    field_attach_create_bundle('crm_core_activity_type', $activity_type->type);

    // Add base fields to the contact
    /// Bug: the function is in crm_activity_admin.inc, why file not auto included
    module_load_include('inc', 'crm_core_activity', 'crm_core_activity.admin');
    crm_core_activity_type_add_default_fields($activity_type);

    // Notify other modules that a new contact type has been created.
    module_invoke_all('crm_core_activity_type_insert', $activity_type);
  }
  else {
    // Notify other modules that an existing contact type has been updated.
    module_invoke_all('crm_core_activity_type_update', $activity_type);
  }

  return $op;
}

/**
 * Return a new activity type with initialize fields.
 *
 * @param string $type
 *   The machine-readable name of the contact type. (eg. Meeting)
 *
 * @return
 *   A stdClass object with activity fields
 */
function crm_core_activity_type_new($type = '') {
  return (object) array(
    'type' => $type,
    'label' => '',
    'description' => '',
    // 'help' => '',
  );
}
